// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KartverketProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251101015314_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("KartverketProject.Models.Data", b =>
                {
                    b.Property<int>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DataId"));

                    b.Property<int>("ObstacleId")
                        .HasColumnType("int");

                    b.Property<string>("ObstacleJSON")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DataId");

                    b.HasIndex("ObstacleId");

                    b.ToTable("DataEntries");

                    b.HasData(
                        new
                        {
                            DataId = 1,
                            ObstacleId = 1,
                            ObstacleJSON = "{\"type\":\"FeatureCollection\",\"features\":[]}"
                        });
                });

            modelBuilder.Entity("KartverketProject.Models.Obstacle", b =>
                {
                    b.Property<int>("ObstacleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ObstacleId"));

                    b.Property<string>("ObstacleDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<double>("ObstacleHeight")
                        .HasColumnType("double");

                    b.Property<string>("ObstacleJSON")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ObstacleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ObstacleSubmittedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ObstacleId");

                    b.ToTable("Obstacles");

                    b.HasData(
                        new
                        {
                            ObstacleId = 1,
                            ObstacleDescription = "This is a test obstacle.",
                            ObstacleHeight = 10.5,
                            ObstacleJSON = "{\"type\":\"FeatureCollection\",\"features\":[]}",
                            ObstacleName = "Test Obstacle",
                            ObstacleSubmittedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("KartverketProject.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("ObstacleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("ObstacleId");

                    b.HasIndex("UserId");

                    b.ToTable("Report");

                    b.HasData(
                        new
                        {
                            ReportId = 1,
                            ObstacleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("KartverketProject.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "test@test.com",
                            Password = "password123",
                            Username = "testuser"
                        });
                });

            modelBuilder.Entity("KartverketProject.Models.Data", b =>
                {
                    b.HasOne("KartverketProject.Models.Obstacle", "Obstacle")
                        .WithMany("DataEntries")
                        .HasForeignKey("ObstacleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obstacle");
                });

            modelBuilder.Entity("KartverketProject.Models.Report", b =>
                {
                    b.HasOne("KartverketProject.Models.Obstacle", "Obstacle")
                        .WithMany()
                        .HasForeignKey("ObstacleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartverketProject.Models.User", "User")
                        .WithMany("ReportEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obstacle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KartverketProject.Models.Obstacle", b =>
                {
                    b.Navigation("DataEntries");
                });

            modelBuilder.Entity("KartverketProject.Models.User", b =>
                {
                    b.Navigation("ReportEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
